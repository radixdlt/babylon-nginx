on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [ created ]


name: Build artifacts

jobs:

  upload-release:
    if: ${{ github.event_name == 'release' }}
    name: Upload nginx configuration artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - name: Generate artifacts
        run: |
          bash generate_artifact.sh
      - name: Upload Full Node Release Asset
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./babylon-nginx-fullnode-conf.zip
          asset_name: babylon-nginx-fullnode-conf.zip
          asset_content_type: application/zip
  
  build-push-container-private:
    if: github.event_name == 'pull_request'
    name: Private
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      # image information
      image_registry: "docker.io"
      image_organization: "radixdlt"
      image_name: "private-babylon-nginx"
      tag: ${{ github.head_ref }}
      # build information
      restore_artifact: "false"
      context: "."
      dockerfile: "./Dockerfile.alpine"
      platforms: "linux/amd64,linux/arm64"
      # optimizations
      cache_tag_suffix: "pr"
      enable_trivy: "true"
      scan_image: true
      snyk_target_ref: ${{ github.ref_name }}
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

  build-push-container-docker:
    name: Dockerhub
    if: github.event_name == 'release'
    uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
    with:
      environment: release
      # image information
      image_registry: "docker.io"
      image_organization: "radixdlt"
      image_name: "babylon-nginx"
      tag: ${{ github.event.release.tag_name }}
      # build information
      restore_artifact: "false"
      context: "."
      dockerfile: "./Dockerfile.alpine"
      platforms: "linux/amd64,linux/arm64"
      # optimizations
      cache_tag_suffix: "release"
      enable_dockerhub: "true"
      enable_trivy: "true"
      scan_image: true
      snyk_target_ref: ${{ github.ref_name }}
    secrets:
      workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
      service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      role_to_assume: ${{ secrets.DOCKERHUB_RELEASER_ROLE }}

  snyk-container-monitor-devops:
    runs-on: ubuntu-latest
    #    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs:
      - build-push-container-private
      #- build-push-container-docker
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
        uses: radixdlt/public-iac-resuable-artifacts/snyk-container-monitor@main
        with:
          role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
          app_name: 'babylon-nginx'
          step_name: 'snyk-container-monitor'
          dockerhub_secret_name: ${{ secrets.AWS_SECRET_NAME_DOCKERHUB }}
          snyk_secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
          parse_json: true
          snyk_org_id: ${{ secrets.SNYK_DEVOPS_ORG_ID }}
          image: docker.io/radixdlt/private-babylon-nginx:${{ github.head_ref }} # ${{ github.event.release.tag_name }}
          target_ref: ${{ github.ref_name }}

  snyk-container-monitor-network:
    runs-on: ubuntu-latest
    #    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs:
      - build-push-container-private
      #- build-push-container-docker
    permissions:
      id-token: write
      pull-requests: read
      contents: read
      deployments: write
    steps:
      uses: radixdlt/public-iac-resuable-artifacts/snyk-container-monitor@main
      with:
        role_name: ${{ secrets.AWS_ROLE_NAME_SNYK_SECRET }}
        app_name: 'babylon-nginx'
        step_name: 'snyk-container-monitor'
        dockerhub_secret_name: ${{ secrets.AWS_SECRET_NAME_DOCKERHUB }}
        snyk_secret_name: ${{ secrets.AWS_SECRET_NAME_SNYK }}
        parse_json: true
        snyk_org_id: ${{ secrets.SNYK_NETWORK_ORG_ID }}
        image: docker.io/radixdlt/private-babylon-nginx:${{ github.head_ref }} # ${{ github.event.release.tag_name }}
        target_ref: ${{ github.ref_name }}
