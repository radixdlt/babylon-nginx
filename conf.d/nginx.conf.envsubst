user nginx;
worker_processes 1;

error_log stderr notice;
pid /var/run/nginx.pid;

events {
    worker_connections 65535;
}

stream {
    resolver "$NGINX_RESOLVER";
    resolver_timeout 600s;
    server {
        listen $NGINX_VALIDATOR_TCP_PORT;
        proxy_pass $RADIXDLT_VALIDATOR_HOST:$RADIXDLT_VALIDATOR_TCP_PORT;
    }
}


http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

     # log the bad requests:
     map ${DOLLAR}status ${DOLLAR}loggable {
                404 0;
                499 1;
                default 0;
      }
    ${INCLUDE_NGINX_BEHIND_CLOUDFLARE}

    log_format json_analytics escape=json '{'
                                '"msec": "${DOLLAR}msec", ' # request unixtime in seconds with a milliseconds resolution
                                '"connection": "${DOLLAR}connection", ' # connection serial number
                                '"connection_requests": "${DOLLAR}connection_requests", ' # number of requests made in connection
                        '"pid": "${DOLLAR}pid", ' # process pid
                        '"request_id": "${DOLLAR}request_id", ' # the unique request id
                        '"request_length": "${DOLLAR}request_length", ' # request length (including headers and body)
                        '"remote_addr": "${DOLLAR}remote_addr", ' # client IP
                        '"remote_user": "${DOLLAR}remote_user", ' # client HTTP username
                        '"remote_port": "${DOLLAR}remote_port", ' # client port
                        '"time_local": "${DOLLAR}time_local", '
                        '"time_iso8601": "${DOLLAR}time_iso8601", ' # local time in the ISO 8601 standard format
                        '"request": "${DOLLAR}request", ' # full path no arguments if the request
                        '"request_uri": "${DOLLAR}request_uri", ' # full path and arguments if the request
                        '"args": "${DOLLAR}args", ' # args
                        '"status": "${DOLLAR}status", ' # response status code
                        '"body_bytes_sent": "${DOLLAR}body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                        '"bytes_sent": "${DOLLAR}bytes_sent", ' # the number of bytes sent to a client
                        '"http_referer": "${DOLLAR}http_referer", ' # HTTP referer
                        '"http_user_agent": "${DOLLAR}http_user_agent", ' # user agent
                        '"http_x_forwarded_for": "${DOLLAR}http_x_forwarded_for", ' # http_x_forwarded_for
                        '"http_host": "${DOLLAR}http_host", ' # the request Host: header
                        '"server_name": "${DOLLAR}server_name", ' # the name of the vhost serving the request
                        '"request_time": "${DOLLAR}request_time", ' # request processing time in seconds with msec resolution
                        '"upstream": "${DOLLAR}upstream_addr", ' # upstream backend server for proxied requests
                        '"upstream_connect_time": "${DOLLAR}upstream_connect_time", ' # upstream handshake time incl. TLS
                        '"upstream_header_time": "${DOLLAR}upstream_header_time", ' # time spent receiving upstream headers
                        '"upstream_response_time": "${DOLLAR}upstream_response_time", ' # time spend receiving upstream body
                        '"upstream_response_length": "${DOLLAR}upstream_response_length", ' # upstream response length
                        '"upstream_cache_status": "${DOLLAR}upstream_cache_status", ' # cache HIT/MISS where applicable
                        '"ssl_protocol": "${DOLLAR}ssl_protocol", ' # TLS protocol
                        '"ssl_cipher": "${DOLLAR}ssl_cipher", ' # TLS cipher
                        '"scheme": "${DOLLAR}scheme", ' # http or https
                        '"request_method": "${DOLLAR}request_method", ' # request method
                        '"server_protocol": "${DOLLAR}server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                        '"pipe": "${DOLLAR}pipe", ' # "p" if request was pipelined, "." otherwise
                        '"gzip_ratio": "${DOLLAR}gzip_ratio", '
                        '"http_cf_ray": "${DOLLAR}http_cf_ray", '
                        '"http_x_radixdlt_method": "${DOLLAR}http_x_radixdlt_method", '
                        '"http_cf_connecting_ip": "${DOLLAR}http_cf_connecting_ip"'
                        '}';

    sendfile on;
    #tcp_nopush on;

    # https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration
    # https://gist.github.com/v0lkan/90fcb83c86918732b894
    client_body_timeout 12;
    client_header_timeout 12;
    # How long an idle keepalive connection remains open.
    keepalive_timeout 15;
    # Number of requests a client can make over a single keepalive connection. (default is 100)
    keepalive_requests 500;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    send_timeout 10;
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    #gzip  on;

    resolver "$NGINX_RESOLVER";
    resolver_timeout 600s; 

    include conf.d/enable-tls.conf;

    # configure proxy cache zones
    proxy_cache_path /var/cache/nginx/radixdlt-hot levels=1:2 keys_zone=radixdlt_hot:1m max_size=100m inactive=60m use_temp_path=off;

    # configure rate limit zones
    include conf.d/enable-rate-limits.conf;
    limit_req_zone ${DOLLAR}binary_remote_addr zone=archive:10m rate=$RADIXDLT_ARCHIVE_ZONE_LIMIT;
    limit_req_zone ${DOLLAR}binary_remote_addr zone=construction:10m rate=$RADIXDLT_CONSTRUCTION_ZONE_LIMIT;
    limit_req_zone ${DOLLAR}binary_remote_addr zone=faucet:10m rate=$RADIXDLT_FAUCET_ZONE_LIMIT;

    ${INCLUDE_DEFAULT_RATE_LIMITS}

    error_log $NGINX_LOGS_DIR/error.log notice;
    server {
        listen 443 ssl;
        server_name localhost;

        access_log $NGINX_LOGS_DIR/access_bad.log json_analytics if=${DOLLAR}loggable;
        access_log /dev/stdout json_analytics;

        #include conf.d/cloudflare-allow.conf;
        #deny all;

        # Basic Auth
        auth_basic_user_file /etc/nginx/secrets/htpasswd.admin;
        auth_basic on;

        # Limit the request body size
        client_max_body_size 1m;

        # https://www.nadeau.tv/nginx-proxy_pass-dns-cache/
        set ${DOLLAR}clientAPI http://$RADIXDLT_VALIDATOR_HOST:$RADIXDLT_CLIENT_HTTP_PORT;
        set ${DOLLAR}node http://$RADIXDLT_VALIDATOR_HOST:$RADIXDLT_NODE_API_PORT;

        include conf.d/error-location.conf;
        ${INCLUDE_RADIXDLT_FAUCET_ENABLED}
        ${INCLUDE_RADIXDLT_ARCHIVE_API_ENABLE}
        ${INCLUDE_RADIXDLT_CONSTRUCTION_API_ENABLE}
        ${INCLUDE_RADIXDLT_CHAOS_API_ENABLE}
        ${INCLUDE_RADIXDLT_SYSTEM_API_ENABLE}
        ${INCLUDE_RADIXDLT_ACCOUNT_API_ENABLE}
        ${INCLUDE_RADIXDLT_VALIDATION_API_ENABLE}
        ${INCLUDE_RADIXDLT_HEALTH_API_ENABLE}
        ${INCLUDE_RADIXDLT_VERSION_API_ENABLE}
        ${INCLUDE_RADIXDLT_METRICS_API_ENABLE}
        ${INCLUDE_RADIXDLT_ENABLE_DEVELOPER_API}
        ${INCLUDE_RADIXDLT_ENABLE_ACCOUNT}
    }
     server {
            listen 9195;
            server_name localhost;
            include conf.d/nginx-status-location.conf;
     }
}
